Index: src/lib/script.h
===================================================================
--- src/lib/script.h	(revision 48130)
+++ src/lib/script.h	(working copy)
@@ -1,7 +1,11 @@
 #ifndef _DYN_FUNCTION_H_
 #define _DYN_FUNCTION_H_
 
+#ifdef __WIN32
+#include <win32-dlfcn.h>
+#else
 #include <dlfcn.h>
+#endif
 
 #ifndef BUILD_X11
 # ifndef X_DISPLAY_MISSING
Index: src/lib/image.c
===================================================================
--- src/lib/image.c	(revision 48130)
+++ src/lib/image.c	(working copy)
@@ -602,7 +602,7 @@
    *num_ret = 0;
    /* same for system loader path */
    s = (char *)malloc(sizeof(SYS_LOADERS_PATH) + 8 + 1);
-   sprintf(s, SYS_LOADERS_PATH "/loaders");
+   sprintf(s, SYS_LOADERS_PATH);
 #ifndef __EMX__
    l = __imlib_FileDir(s, &num);
 #else
@@ -618,7 +618,7 @@
              s = (char *)realloc(s,
                                  sizeof(SYS_LOADERS_PATH) + 9 + strlen(l[i]) +
                                  1);
-             sprintf(s, SYS_LOADERS_PATH "/loaders/%s", l[i]);
+             sprintf(s, SYS_LOADERS_PATH "/%s", l[i]);
 #ifndef __EMX__
              list[pi + i] = strdup(s);
 #else
@@ -660,7 +660,7 @@
            continue;
         ext = strrchr(list[i], '.');
         if ((ext) && (
-#ifdef __CYGWIN__
+#ifdef WIN32
                         (!strcasecmp(ext, ".dll")) ||
 #endif
                         (!strcasecmp(ext, ".so"))))
@@ -732,21 +732,26 @@
 
    /* dont stat the dir and rescan if we checked in the last 5 seconds */
    current_time = time(NULL);
+   /*DBG*fprintf(stderr, "; (rescan_loaders) checking 5 sec\n"); */
    if ((current_time - last_scan_time) < 5)
       return;
+   /*DBG*fprintf(stderr, "; (rescan_loaders)\n"); */
    /* ok - was the system loaders dir contents modified ? */
    last_scan_time = current_time;
 #ifndef __EMX__
-   if (__imlib_FileIsDir(SYS_LOADERS_PATH "/loaders/"))
+   if (__imlib_FileIsDir(SYS_LOADERS_PATH))
 #else
-   if (__imlib_FileIsDir(__XOS2RedirRoot(SYS_LOADERS_PATH "/loaders/")))
+   if (__imlib_FileIsDir(__XOS2RedirRoot(SYS_LOADERS_PATH)))
 #endif
      {
+       /*DBG*fprintf(stderr, 
+                      "; (rescan_loaders) file_is_dir(%s) = 1\n", 
+                      SYS_LOADERS_PATH); */
 #ifndef __EMX__
-        current_time = __imlib_FileModDate(SYS_LOADERS_PATH "/loaders/");
+        current_time = __imlib_FileModDate(SYS_LOADERS_PATH);
 #else
         current_time =
-           __imlib_FileModDate(__XOS2RedirRoot(SYS_LOADERS_PATH "/loaders/"));
+           __imlib_FileModDate(__XOS2RedirRoot(SYS_LOADERS_PATH));
 #endif
         if ((current_time > last_modified_system_time) || (!scanned))
           {
@@ -755,6 +760,7 @@
              last_modified_system_time = current_time;
           }
      }
+   /*DBG*fprintf(stderr, "; (rescan_loaders) do_reload: %d\n", do_reload);*/
    /* if we dont ned to reload the loaders - get out now */
    if (!do_reload)
       return;
@@ -1024,10 +1030,12 @@
    __imlib_RescanLoaders();
    /* take a guess by extension on the best loader to use */
    best_loader = __imlib_FindBestLoaderForFile(im->real_file, 0);
+   /*DBG*fprintf(stderr, "best_loader: %p\n", best_loader);*/
    errno = 0;
    if (best_loader)
       loader_ret =
          best_loader->load(im, progress, progress_granularity, immediate_load);
+   /*DBG*fprintf(stderr, "im->w: %d\n", im->w);*/
    /* width is still 0 - the loader didnt manage to do anything */
    if (im->w == 0)
      {
@@ -1038,6 +1046,7 @@
         /* run through all loaders and try load until one succeeds */
         while ((l) && (im->w == 0))
           {
+             /*DBG*fprintf(stderr, "step loader: %s load: %p\n", l->file, l->load);*/
              /* if its not the best loader that already failed - try load */
              if (l != best_loader)
                 loader_ret =
@@ -1095,8 +1104,10 @@
                      *er = IMLIB_LOAD_ERROR_PATH_COMPONENT_NOT_DIRECTORY;
                   else if (errno == EFAULT)
                      *er = IMLIB_LOAD_ERROR_PATH_POINTS_OUTSIDE_ADDRESS_SPACE;
+#ifdef ELOOP
                   else if (errno == ELOOP)
                      *er = IMLIB_LOAD_ERROR_TOO_MANY_SYMBOLIC_LINKS;
+#endif
                   else if (errno == ENOMEM)
                      *er = IMLIB_LOAD_ERROR_OUT_OF_MEMORY;
                   else if (errno == EMFILE)
@@ -1307,8 +1318,10 @@
            *er = IMLIB_LOAD_ERROR_PATH_COMPONENT_NOT_DIRECTORY;
         else if (errno == EFAULT)
            *er = IMLIB_LOAD_ERROR_PATH_POINTS_OUTSIDE_ADDRESS_SPACE;
+#ifdef ELOOP
         else if (errno == ELOOP)
            *er = IMLIB_LOAD_ERROR_TOO_MANY_SYMBOLIC_LINKS;
+#endif
         else if (errno == ENOMEM)
            *er = IMLIB_LOAD_ERROR_OUT_OF_MEMORY;
         else if (errno == EMFILE)
Index: src/lib/image.h
===================================================================
--- src/lib/image.h	(revision 48130)
+++ src/lib/image.h	(working copy)
@@ -8,7 +8,11 @@
 #  define X_DISPLAY_MISSING
 # endif
 
-# include <dlfcn.h>
+# ifdef __WIN32
+#  include <win32-dlfcn.h>
+# else
+#  include <dlfcn.h>
+# endif
 # include <Imlib2.h>
 
 # ifndef RTLD_LOCAL
Index: src/lib/loaderpath.h
===================================================================
--- src/lib/loaderpath.h	(revision 48130)
+++ src/lib/loaderpath.h	(working copy)
@@ -1,3 +1,9 @@
 #include "config.h"
 
-#define SYS_LOADERS_PATH PACKAGE_LIB_DIR"/imlib2"
+#ifdef WIN32
+#define SYS_LOADERS_PATH "imlib2/loaders"
+#define SYS_FILTERS_PATH "imlib2/filters"
+#else
+#define SYS_LOADERS_PATH PACKAGE_LIB_DIR"/imlib2/loaders"
+#define SYS_FILTERS_PATH PACKAGE_LIB_DIR"/imlib2/filters"
+#endif
Index: src/lib/Imlib2.h
===================================================================
--- src/lib/Imlib2.h	(revision 48130)
+++ src/lib/Imlib2.h	(working copy)
@@ -6,9 +6,18 @@
 # endif
 # ifdef WIN32
 #  ifdef BUILDING_DLL
-#   define EAPI __declspec(dllexport)
+#   warning "building dll"
+#   ifdef DLL_EXPORT
+#    warning "dll_export is enabled"
+//#    define EAPI __declspec(dllexport)
+#    define EAPI 
+#   else
+#    warning "dll_export is disabled"
+#    define EAPI 
+#   endif
 #  else
-#   define EAPI __declspec(dllimport)
+//#   define EAPI __declspec(dllimport)
+#   define EAPI 
 #  endif
 # else
 #  ifdef __GNUC__
Index: src/lib/dynamic_filters.c
===================================================================
--- src/lib/dynamic_filters.c	(revision 48130)
+++ src/lib/dynamic_filters.c	(working copy)
@@ -156,8 +156,8 @@
 
    *num_ret = 0;
    /* same for system loader path */
-   s = (char *)malloc(sizeof(SYS_LOADERS_PATH) + 8 + 1);
-   sprintf(s, SYS_LOADERS_PATH "/filters");
+   s = (char *)malloc(sizeof(SYS_FILTERS_PATH) + 8 + 1);
+   sprintf(s, SYS_FILTERS_PATH);
 #ifndef __EMX__
    l = __imlib_FileDir(s, &num);
 #else
@@ -170,9 +170,9 @@
         for (i = 0; i < num; i++)
           {
              s = (char *)realloc(s,
-                                 sizeof(SYS_LOADERS_PATH) + 9 + strlen(l[i]) +
+                                 sizeof(SYS_FILTERS_PATH) + 9 + strlen(l[i]) +
                                  1);
-             sprintf(s, SYS_LOADERS_PATH "/filters/%s", l[i]);
+             sprintf(s, SYS_FILTERS_PATH "/%s", l[i]);
 #ifndef __EMX__
              list[pi + i] = strdup(s);
 #else
Index: src/lib/file.c
===================================================================
--- src/lib/file.c	(revision 48130)
+++ src/lib/file.c	(working copy)
@@ -10,7 +10,14 @@
 #include <dirent.h>
 #include <string.h>
 #include <stdlib.h>
+#ifdef WIN32
+#define PERM_FLAGS (S_IRUSR)
+#else
+#define PERM_FLAGS (S_IRUSR | S_IRGRP | S_IROTH)
+#endif
+#ifdef HAVE_PWD_H
 #include <pwd.h>
+#endif
 #include "file.h"
 
 char               *
@@ -229,7 +236,7 @@
       fl = __imlib_FileRealFile(s);
    if (!fl)
       return 0;
-   if (!(__imlib_FilePermissions(fl) & (S_IRUSR | S_IRGRP | S_IROTH)))
+   if (!(__imlib_FilePermissions(fl) & PERM_FLAGS))
      {
         free(fl);
         return 0;
@@ -249,9 +256,11 @@
    char              **names;
    struct dirent      *dp;
 
+   /*DBG*fprintf(stderr, "; trying to opendir: %s\n", (dir) ? dir : "(null)");*/
    if ((!dir) || (!*dir))
       return (0);
    dirp = opendir(dir);
+   /*DBG*fprintf(stderr, "; opendir: %s = %p\n", dir, dirp);*/
    if (!dirp)
      {
         *num = 0;
@@ -279,6 +288,7 @@
         if ((strcmp(dp->d_name, ".")) && (strcmp(dp->d_name, "..")))
           {
              names[i] = strdup(dp->d_name);
+             /*DBG*fprintf(stderr, "readdir: %s\n", dp->d_name);*/
              i++;
           }
      }
@@ -372,7 +382,7 @@
    char               *s;
    struct passwd      *pwd;
 
-#ifndef __EMX__
+#if !(defined __EMX__ || defined __WIN32)
    s = getenv("HOME");
    if (s)
       return strdup(s);
Index: src/lib/Makefile.am
===================================================================
--- src/lib/Makefile.am	(revision 48130)
+++ src/lib/Makefile.am	(working copy)
@@ -76,11 +76,21 @@
 amd64_blend.S \
 amd64_blend_cmod.S
 
+WIN32_SRCS = \
+win32-dlfcn.c \
+win32-dlfcn.h
+
 MMX_OBJS = $(MMX_SRCS:.S=.lo)
 AMD64_OBJS = $(AMD64_SRCS:.S=.lo)
 
 EXTRA_DIST = $(MMX_SRCS) $(AMD64_SRCS) asm_loadimmq.S
 
+if WIN32
+libImlib2_la_SOURCES += $(WIN32_SRCS)
+else
+error oops
+endif
+
 if BUILD_MMX
 libImlib2_la_LIBADD       = $(MMX_OBJS) @my_libs@
 libImlib2_la_DEPENDENCIES = $(top_builddir)/config.h $(MMX_OBJS)
@@ -95,5 +105,5 @@
 libImlib2_la_DEPENDENCIES = $(top_builddir)/config.h
 endif
 endif
-libImlib2_la_LDFLAGS      = -version-info @lt_version@
+libImlib2_la_LDFLAGS      = -version-info @lt_version@ $(LT_LDFLAGS)
 
Index: src/lib/common.h
===================================================================
--- src/lib/common.h	(revision 48130)
+++ src/lib/common.h	(working copy)
@@ -16,6 +16,15 @@
 #include <sys/types.h>
 #endif
 
+#ifndef HAVE_MKSTEMP
+# ifdef WIN32
+#  include <fcntl.h>
+#  define mkstemp(p) _open(_mktemp(p), _O_CREAT | _O_SHORT_LIVED | _O_EXCL)
+# else
+#  error Missing mkstemp() function.
+# endif
+#endif
+
 #if defined(__GNUC__) && (__GNUC__ >= 4)
 #define __hidden __attribute__((visibility("hidden")))
 #else
Index: src/modules/filters/Makefile.am
===================================================================
--- src/modules/filters/Makefile.am	(revision 48130)
+++ src/modules/filters/Makefile.am	(working copy)
@@ -13,17 +13,17 @@
 EXTRA_DIST = filter_common.h
 
 testfilter_la_SOURCES = filter_test.c
-testfilter_la_LDFLAGS = -module -avoid-version
+testfilter_la_LDFLAGS = -module -avoid-version $(LT_LDFLAGS)
 testfilter_la_LIBADD  = $(top_builddir)/src/lib/libImlib2.la
 testfilter_la_LIBTOOLFLAGS = --tag=disable-static
 
 bumpmap_la_SOURCES    = filter_bumpmap.c
-bumpmap_la_LDFLAGS    = -module -avoid-version
+bumpmap_la_LDFLAGS    = -module -avoid-version $(LT_LDFLAGS)
 bumpmap_la_LIBADD     = $(top_builddir)/src/lib/libImlib2.la -lm
 bumpmap_la_LIBTOOLFLAGS = --tag=disable-static
 
 colormod_la_SOURCES   = filter_colormod.c
-colormod_la_LDFLAGS   = -module -avoid-version
+colormod_la_LDFLAGS   = -module -avoid-version $(LT_LDFLAGS)
 colormod_la_LIBADD    = $(top_builddir)/src/lib/libImlib2.la
 colormod_la_LIBTOOLFLAGS = --tag=disable-static
 
Index: src/modules/loaders/loader_png.c
===================================================================
--- src/modules/loaders/loader_png.c	(revision 48130)
+++ src/modules/loaders/loader_png.c	(working copy)
@@ -24,6 +24,7 @@
    png_infop           info_ptr = NULL;
    int                 bit_depth, color_type, interlace_type;
 
+   /*DBG*fprintf(stderr, "(load_png) start loading %s\n", im->real_file);*/
    /* if immediate_load is 1, then don't delay image loading as below, or */
    /* already data in this image - don't load it again */
    if (im->data)
@@ -36,6 +37,7 @@
      {
         unsigned char       buf[PNG_BYTES_TO_CHECK];
 
+        /*DBG*fprintf(stderr, "(load_png) parsing %s\n", im->real_file);*/
         /* if we haven't read the header before, set the header data */
         fread(buf, 1, PNG_BYTES_TO_CHECK, f);
         if (png_sig_cmp(buf, 0, PNG_BYTES_TO_CHECK))
Index: src/modules/loaders/loader_jpeg.c
===================================================================
--- src/modules/loaders/loader_jpeg.c	(revision 48130)
+++ src/modules/loaders/loader_jpeg.c	(working copy)
@@ -4,7 +4,11 @@
 
 struct ImLib_JPEG_error_mgr {
    struct jpeg_error_mgr pub;
+#ifdef HAVE_SIGSETJMP
    sigjmp_buf          setjmp_buffer;
+#else
+   jmp_buf             jmp_buffer;
+#endif
 };
 typedef struct ImLib_JPEG_error_mgr *emptr;
 
@@ -15,7 +19,11 @@
 
    errmgr = (emptr) cinfo->err;
 /*   cinfo->err->output_message(cinfo);*/
+#ifdef HAVE_SIGSETJMP
    siglongjmp(errmgr->setjmp_buffer, 1);
+#else
+   longjmp(errmgr->jmp_buffer, 1);
+#endif
    return;
 }
 
@@ -60,7 +68,11 @@
    jerr.pub.error_exit = _JPEGFatalErrorHandler;
    jerr.pub.emit_message = _JPEGErrorHandler2;
    jerr.pub.output_message = _JPEGErrorHandler;
+#ifdef HAVE_SIGSETJMP
    if (sigsetjmp(jerr.setjmp_buffer, 1))
+#else
+   if (setjmp(jerr.jmp_buffer))
+#endif
      {
         jpeg_destroy_decompress(&cinfo);
         fclose(f);
@@ -255,7 +267,11 @@
    jerr.pub.emit_message = _JPEGErrorHandler2;
    jerr.pub.output_message = _JPEGErrorHandler;
    cinfo.err = jpeg_std_error(&(jerr.pub));
+#ifdef HAVE_SIGSETJMP
    if (sigsetjmp(jerr.setjmp_buffer, 1))
+#else
+   if (setjmp(jerr.jmp_buffer))
+#endif
      {
         jpeg_destroy_compress(&cinfo);
         free(buf);
Index: src/modules/loaders/Makefile.am
===================================================================
--- src/modules/loaders/Makefile.am	(revision 48130)
+++ src/modules/loaders/Makefile.am	(working copy)
@@ -30,6 +30,9 @@
 if BUILD_ID3_LOADER
 ID3_L                = id3.la
 endif
+if BUILD_TGA_LOADER
+TGA_L                = tga.la
+endif
 
 pkg_LTLIBRARIES      = \
 $(JPEG_L) \
@@ -43,73 +46,73 @@
 argb.la \
 bmp.la \
 xpm.la \
-tga.la \
+$(TGA_L) \
 lbm.la
 
 EXTRA_DIST = loader_common.h
 
 jpeg_la_SOURCES      = loader_jpeg.c
-jpeg_la_LDFLAGS      = -module -avoid-version
+jpeg_la_LDFLAGS      = -module -avoid-version $(LT_LDFLAGS)
 jpeg_la_LIBADD       = @JPEGLIBS@ $(top_builddir)/src/lib/libImlib2.la
 jpeg_la_LIBTOOLFLAGS = --tag=disable-static
 
 png_la_SOURCES       = loader_png.c
 png_la_CPPFLAGS      = @PNG_CFLAGS@
-png_la_LDFLAGS       = -module -avoid-version
+png_la_LDFLAGS       = -module -avoid-version $(LT_LDFLAGS)
 png_la_LIBADD        = @PNG_LIBS@ $(top_builddir)/src/lib/libImlib2.la
 png_la_LIBTOOLFLAGS = --tag=disable-static
 
 tiff_la_SOURCES      = loader_tiff.c
-tiff_la_LDFLAGS      = -module -avoid-version
+tiff_la_LDFLAGS      = -module -avoid-version $(LT_LDFLAGS)
 tiff_la_LIBADD       = @TIFFLIBS@ $(top_builddir)/src/lib/libImlib2.la
 tiff_la_LIBTOOLFLAGS = --tag=disable-static
 
 gif_la_SOURCES       = loader_gif.c
-gif_la_LDFLAGS       = -module -avoid-version
+gif_la_LDFLAGS       = -module -avoid-version $(LT_LDFLAGS)
 gif_la_LIBADD        = @GIFLIBS@ $(top_builddir)/src/lib/libImlib2.la
 gif_la_LIBTOOLFLAGS = --tag=disable-static
 
 zlib_la_SOURCES      = loader_zlib.c
-zlib_la_LDFLAGS      = -module -avoid-version
+zlib_la_LDFLAGS      = -module -avoid-version $(LT_LDFLAGS)
 zlib_la_LIBADD       = @ZLIBLIBS@ $(top_builddir)/src/lib/libImlib2.la
 zlib_la_LIBTOOLFLAGS = --tag=disable-static
 
 bz2_la_SOURCES       = loader_bz2.c
-bz2_la_LDFLAGS       = -module -avoid-version
+bz2_la_LDFLAGS       = -module -avoid-version $(LT_LDFLAGS)
 bz2_la_LIBADD        = @BZ2LIBS@ $(top_builddir)/src/lib/libImlib2.la
 bz2_la_LIBTOOLFLAGS = --tag=disable-static
 
 id3_la_SOURCES       = loader_id3.c
-id3_la_LDFLAGS       = -module -avoid-version
+id3_la_LDFLAGS       = -module -avoid-version $(LT_LDFLAGS)
 id3_la_LIBADD        = @ID3LIBS@ $(top_builddir)/src/lib/libImlib2.la
 id3_la_LIBTOOLFLAGS = --tag=disable-static
 
 pnm_la_SOURCES       = loader_pnm.c
-pnm_la_LDFLAGS       = -module -avoid-version
+pnm_la_LDFLAGS       = -module -avoid-version $(LT_LDFLAGS)
 pnm_la_LIBADD        = $(top_builddir)/src/lib/libImlib2.la
 pnm_la_LIBTOOLFLAGS = --tag=disable-static
 
 argb_la_SOURCES      = loader_argb.c
-argb_la_LDFLAGS      = -module -avoid-version
+argb_la_LDFLAGS      = -module -avoid-version $(LT_LDFLAGS)
 argb_la_LIBADD       = $(top_builddir)/src/lib/libImlib2.la
 argb_la_LIBTOOLFLAGS = --tag=disable-static
 
 bmp_la_SOURCES       = loader_bmp.c
-bmp_la_LDFLAGS       = -module -avoid-version
+bmp_la_LDFLAGS       = -module -avoid-version $(LT_LDFLAGS)
 bmp_la_LIBADD        = $(top_builddir)/src/lib/libImlib2.la
 bmp_la_LIBTOOLFLAGS = --tag=disable-static
 
 xpm_la_SOURCES       = loader_xpm.c
-xpm_la_LDFLAGS       = -module -avoid-version
+xpm_la_LDFLAGS       = -module -avoid-version $(LT_LDFLAGS)
 xpm_la_LIBADD        = $(top_builddir)/src/lib/libImlib2.la
 xpm_la_LIBTOOLFLAGS = --tag=disable-static
 
 tga_la_SOURCES       = loader_tga.c
-tga_la_LDFLAGS       = -module -avoid-version
+tga_la_LDFLAGS       = -module -avoid-version $(LT_LDFLAGS)
 tga_la_LIBADD        = $(top_builddir)/src/lib/libImlib2.la
 tga_la_LIBTOOLFLAGS = --tag=disable-static
 
 lbm_la_SOURCES       = loader_lbm.c
-lbm_la_LDFLAGS       = -module -avoid-version
+lbm_la_LDFLAGS       = -module -avoid-version $(LT_LDFLAGS)
 lbm_la_LIBADD        = $(top_builddir)/src/lib/libImlib2.la
 lbm_la_LIBTOOLFLAGS = --tag=disable-static
Index: src/modules/loaders/loader_gif.c
===================================================================
--- src/modules/loaders/loader_gif.c	(revision 48130)
+++ src/modules/loaders/loader_gif.c	(working copy)
@@ -29,7 +29,7 @@
    /* already data in this image - dont load it again */
    if (im->data)
       return 0;
-#ifndef __EMX__
+#if defined __EMX__ || defined WIN32
    fd = open(im->real_file, O_RDONLY);
 #else
    fd = open(im->real_file, O_RDONLY | O_BINARY);
Index: configure.ac
===================================================================
--- configure.ac	(revision 48130)
+++ configure.ac	(working copy)
@@ -48,7 +48,12 @@
 AC_TRY_COMPILE(,,,[cc_supports_gnu99="no";CPPFLAGS="$save_CPPFLAGS"])
 AC_MSG_RESULT($cc_supports_gnu99)
 
+dnl Test if mmap is supported
+AC_FUNC_MMAP
 
+AC_CHECK_HEADERS([pwd.h dlfcn.h])
+AC_CHECK_FUNC([mkstemp])
+
 mmx=no
 amd64=no
 case $host_cpu in
@@ -60,8 +65,61 @@
 case $host_os in
   solaris*) mmx="no";;
   darwin*) mmx="no";;
+  mingw*) mmx="no"
+					AC_LIBTOOL_WIN32_DLL
+					win32="yes"
+					;;
 esac
+AM_CONDITIONAL(WIN32, test "x$win32" = "xyes")
 
+dnl Check which jump code is supported
+AC_TRY_COMPILE(
+		[#include <setjmp.h>],
+		[sigjmp_buf env;
+		 while (!sigsetjmp(env, 1))
+		 	siglongjmp(env, 1);
+		],
+		[AC_DEFINE(HAVE_SIGSETJMP, 1, [Define if sigsetjmp is available.])])
+
+AC_MSG_CHECKING(whether to enable tga support)
+AC_ARG_WITH([tga],
+  [AC_HELP_STRING([--without-tga], [Disable TGA loader])],
+  [
+   if test "$withval" = no ; then
+     tga_loader=no
+   else
+     tga_loader=yes
+   fi
+  ],
+  [ tga_loader=auto ]
+)
+AC_MSG_RESULT($tga_loader)
+
+if test "$tga_loader" != no ; then
+  if test "$ac_cv_func_mmap_fixed_mapped" = "yes"; then
+    tga_ok=yes
+  else
+    case $host_os in
+      *cygwin*)
+        dnl CYGWIN fails the test because MAP_FIXED is not supported.
+        dnl However, tga engine does not use it so let's bypass
+        dnl the trouble here.
+        tga_ok=yes
+        ;;
+      *)
+        tga_ok=no
+        ;;
+    esac
+  fi
+fi
+AM_CONDITIONAL(BUILD_TGA_LOADER, test "$tga_ok" = yes)
+
+case $host_os in
+  mingw*) LT_LDFLAGS="-no-undefined" ;;
+	*) LT_LDFLAGS=""
+esac
+AC_SUBST(LT_LDFLAGS)
+
 AC_ARG_ENABLE([mmx],
   [AC_HELP_STRING([--enable-mmx], [attempt compiling using x86 mmx assembly @<:@default=auto@:>@])],
   [
@@ -551,6 +609,7 @@
 echo "  ZLIB....................: $zlib_ok"
 echo "  BZIP2...................: $bz2_ok"
 echo "  ID3.....................: $id3_ok"
+echo "  TGA.....................: $tga_ok"
 echo "  X.......................: $have_x"
 echo
 echo
Index: src/lib/win32-dlfcn.c
===================================================================
--- src/lib/win32-dlfcn.c (old)
--- src/lib/win32-dlfcn.c (new)
@@ -0,0 +1,43 @@
+#include "config.h"
+
+#if defined WIN32 && !defined HAVE_DLFCN_H
+
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+
+void         *
+win32_dlopen(const char *file, int mode)
+{
+    HANDLE h = 0;
+    char *tmp;
+    
+    tmp = strdup(file);
+    if (tmp) {
+      h = LoadLibraryA(basename(tmp));
+      free(tmp);
+    }
+    if (!h) 
+      h = LoadLibrary(file);
+    return (void *)h;
+}
+
+int
+win32_dlclose(void *handle)
+{
+    FreeLibrary((HANDLE)(handle));
+    return 0;
+}
+
+void        *
+win32_dlsym(void *handle, const char *name)
+{
+    return (void *)GetProcAddress((HANDLE)(handle), name);
+}
+
+char         *
+win32_dlerror(void)
+{
+    return "Unknown";
+}
+
+#endif
Index: src/lib/win32-dlfcn.h
===================================================================
--- src/lib/win32-dlfcn.h (old)
--- src/lib/win32-dlfcn.h (new)
@@ -0,0 +1,23 @@
+#ifndef __DLFCN_WIN32_H__
+#define __DLFCN_WIN32_H__
+
+#define RTLD_LAZY       0
+#define RTLD_NOW        0
+
+#define RTLD_GLOBAL     0
+#define RTLD_LOCAL      0
+
+#define RTLD_DEFAULT    0
+#define RTLD_NEXT       0
+
+void *win32_dlopen (const char *file, int mode);
+int   win32_dlclose(void *handle);
+void *win32_dlsym(void *handle, const char *name);
+char *win32_dlerror(void);
+
+#define dlopen(_file, _mode)    win32_dlopen(_file, _mode)
+#define dlclose(_handle)        win32_dlclose(_handle)
+#define dlsym(_handle, _name)   win32_dlsym(_handle, _name)
+#define dlerror()               win32_dlerror()
+
+#endif
